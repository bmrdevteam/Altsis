name: deploy-pipeline2

on:
  push:
    branches: [test2]

jobs:
  CI:
    name: CI
    runs-on: ubuntu-latest
    env:
      DB_URL: ${{ secrets.DB_URL }}
      REDIS_URL: ${{secrets.REDIS_URL}}
      s3_accessKeyId: ${{secrets.s3_accessKeyId}}
      s3_secretAccessKey: ${{secrets.s3_secretAccessKey}}
      s3_region: ${{secrets.s3_region}}
      s3_bucket: ${{secrets.s3_bucket}}
      saltRounts: ${{secrets.saltRounts}}
      session_key: ${{secrets.session_key}}
      GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
      URL: ${{secrets.URL}}
      SERVER_PORT: ${{secrets.SERVER_PORT_TEST}}
      CLIENT_PORT: ${{secrets.CLIENT_PORT_TEST}}

    steps:
      # 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # docker build 세팅
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.0.0

      # 캐시 받아오기
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub 컨테이너 레지스트리에 로그인
      - name: Login to ghcr
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io/bmrdevteam
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 빌드 후 푸쉬
      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: "ghcr.io/bmrdevteam/bsis-test_backend:latest"
          # (3)
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # 이전 캐시 지우고 새로운 캐시 옮기기
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 슬랙 알림
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Github Action Chatbot
          fields: repo,commit,message,author,action,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.

  CD:
    name: CD
    needs: CI
    runs-on: [self-hosted, label-go] # AWS ./configure에서 사용할 label명

    steps:
      # 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # GitHub 컨테이너 레지스트리에 로그인
      - name: Login to ghcr
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io/bmrdevteam
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Docker run
        run: |
          docker run --name bsis-test_backend_1 -p ${{env.SERVER_PORT}}:${{env.SERVER_PORT}} -d ghcr.io/bmrdevteam/bsis-test_backend:latest

      # 슬랙 알림
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Github Action Chatbot - CD
          fields: repo,commit,message,author,action,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
